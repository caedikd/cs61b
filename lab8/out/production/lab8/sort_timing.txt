Q: Is one sorting algorithm always faster than another?
A: No, but bubble sorter is usually significantly faster than the others.

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: Complexity is sometimes only used for the worst case scenario, for when the array may get bigger than what we observe.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A:

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A:No, certain sorting algorithms ssuch as countingSorter do not increase the time despite increasing the size.

Q: How does changing nrepeats change the plot?
A: Increasing nrepeats makes the plot more linear because the time it takes will be higher and decreasing it will do the opposite.

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: No, there is some randomness to so it is not exactly the same.

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: